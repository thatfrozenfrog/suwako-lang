{
  "scopeName": "source.swk",
  "fileTypes": [".swk"],
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "SWK",
  "patterns": [
    { "include": "#line-python" },

    { "include": "#line-comment" },
    { "include": "#block-comment" },
    { "include": "#define" },
    { "include": "#definehex" },
    { "include": "#label" },
    { "include": "#adrlabel" },
    { "include": "#keywords" },
    { "include": "#pop-keyword" },
    { "include": "#variable" },
    { "include": "#parentheses" },
    { "include": "#string" },
    { "include": "#macro" },
    { "include": "#macrokey" },
    { "include": "#arithmetic-operators" },
    { "include": "#symbols" }
  ],
  "repository": {
    "line-python": {
      "begin": "^\\$",
      "end": "(?=$|[^\\n])",
      "patterns": [
        { "include": "source.python" }
      ]
    },
    "line-comment": {
      "match": ";.*$",
      "name": "comment.line.semicolon"
    },
    "block-comment": {
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block"
    },
    "define": {
      "match": "\\bdef\\s",
      "name": "keyword.control"
    },

    "definehex": {
      "match": "(?<=def\\s)(\\d|\\w)*",
      "name": "constant.numeric"
    },

    "label": {
      "match": "[a-zA-Z_][a-zA-Z0-9_]*(?=:)",
      "name": "entity.name.function"
    },
    "adrlabel": {
      "match": "(?<=adr\\s)[a-zA-Z_][a-zA-Z0-9_]*",
      "name": "entity.name.function.adr"
    },
    "keywords": {
      "match": "\\b(adr|str|org|hex|space|goto|call|pr_length)\\b",
      "name": "keyword.control"
    },
    "pop-keyword": {
      "match": "\\bpop\\s\\b",
      "name": "variable.name"
    },
    "parentheses": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "match": "\\badr\\b",
          "name": "keyword.control.adr"
        },
        {
          "match": "(?<=adr\\s)[a-zA-Z_][a-zA-Z0-9_]*",
          "name": "entity.name.function.adr"
        },
        {
          "match": "\\b[0-9A-Fa-f]{4}\\b",
          "name": "constant.numeric.hex"
        },
        {
          "match": "\\b[0-9A-Fa-f]{2}\\b",
          "name": "constant.numeric.hex"
        }
      ]
    },

    "macro": {
      "match": "\\bmacro\\s",
      "name": "keyword.control"
    },
    "macrokey": {
      "match": "(?<=macro\\s)[a-zA-Z_][a-zA-Z0-9_]*",
      "name": "constant.character"
    },
    "string": {
      "begin": "\"",
      "end": "\"",
      "name": "string.quoted.double"
    },
    "arithmetic-operators": {
      "match": "(\\+|-|\\/ a|\\*|=|<|>|\\^|&|!|\\| a)+",
      "name": "constant.language"
    },
    "variable": {
      "match": "(er|xr|qr|r)\\d{1,2}",
      "name": "keyword.other.unit"
    },

    "symbols": {
      "match": "\\b(render.{4}4|sp|rt|(mem|str)cpy|pr_length|mov|smart_\\w*|str(cat|len)|get\\w*|\\w*_draw|.*print|print\\w*|wait.*\\s|num_\\w*|setlr|DI|(BL|bl)\\s\\w*|)\\b",
      "name": "keyword.other"
    }
  }
}
